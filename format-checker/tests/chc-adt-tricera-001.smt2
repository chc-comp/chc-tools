(set-logic HORN)

(declare-datatypes ((HeapObject 0) (TSLL 0)) (((O_Int  (getInt Int)) (O_UInt  (getUInt Int)) (O_Addr  (getAddr Int)) (O_TSLL  (getTSLL TSLL)) (defObj ))
                                              ((TSLL  (next Int) (prev Int) (data Int)))))
(declare-datatypes ((Heap 0)) (((HeapCtor  (HeapSize Int) (HeapContents (Array Int HeapObject))))))

(declare-fun |inv_main2| ( Heap ) Bool)
(declare-fun |inv_main3| ( Heap Int ) Bool)
(declare-fun |inv_main70| ( Heap Int Int Int Int ) Bool)
(declare-fun |inv_main8| ( Heap Int Int Int ) Bool)
(declare-fun |inv_main86| ( Heap Int Int Int Int ) Bool)
(declare-fun |inv_main33| ( Heap Int Int Int Int ) Bool)
(declare-fun |inv_main92| ( Heap Int Int Int Int ) Bool)
(declare-fun |inv_main15| ( Heap Int Int Int ) Bool)
(declare-fun |inv_main49| ( Heap Int Int Int Int ) Bool)
(declare-fun |inv_main81| ( Heap Int Int Int Int ) Bool)
(declare-fun |inv_main54| ( Heap Int Int Int Int ) Bool)
(declare-fun |inv_main12| ( Heap Int Int Int ) Bool)
(declare-fun |inv_main5| ( Heap Int ) Bool)
(declare-fun |inv_main59| ( Heap Int Int Int Int Int ) Bool)
(declare-fun |inv_main52| ( Heap Int Int Int Int ) Bool)
(declare-fun |inv_main61| ( Heap Int Int Int Int ) Bool)
(declare-fun |inv_main23| ( Heap Int Int Int ) Bool)
(declare-fun |CHC_COMP_FALSE| ( ) Bool)
(declare-fun |inv_main51| ( Heap Int Int Int Int ) Bool)
(declare-fun |inv_main50| ( Heap Int Int Int Int ) Bool)
(declare-fun |inv_main13| ( Heap Int Int Int Int ) Bool)
(declare-fun |inv_main31| ( Heap Int Int Int ) Bool)
(declare-fun |inv_main42| ( Heap Int Int Int ) Bool)
(declare-fun |inv_main62| ( Heap Int Int Int Int ) Bool)
(declare-fun |inv_main82| ( Heap Int Int Int Int ) Bool)
(declare-fun |inv_main22| ( Heap Int Int Int ) Bool)
(declare-fun |inv_main55| ( Heap Int Int Int Int ) Bool)
(declare-fun |inv_main38| ( Heap Int Int Int ) Bool)
(declare-fun |inv_main90| ( Heap Int Int Int Int ) Bool)
(declare-fun |inv_main58| ( Heap Int Int Int Int ) Bool)
(declare-fun |inv_main63| ( Heap Int Int Int Int ) Bool)
(declare-fun |inv_main30| ( Heap Int Int Int ) Bool)
(declare-fun |inv_main45| ( Heap Int Int Int ) Bool)
(declare-fun |inv_main66| ( Heap Int Int Int Int ) Bool)
(declare-fun |inv_main27| ( Heap Int Int Int ) Bool)
(declare-fun |inv_main14| ( Heap Int Int Int ) Bool)
(declare-fun |inv_main4| ( Heap Int ) Bool)
(declare-fun |inv_main99| ( Heap Int Int Int Int ) Bool)
(declare-fun |inv_main76| ( Heap Int Int Int Int ) Bool)
(declare-fun |inv_main57| ( Heap Int Int Int Int ) Bool)
(declare-fun |inv_main32| ( Heap Int Int Int ) Bool)
(declare-fun |inv_main74| ( Heap Int Int Int Int ) Bool)

(assert
  (forall ( (v_0 Heap) ) 
    (=>
      (and
        (and true (= v_0 (HeapCtor 0 ((as const (Array Int HeapObject)) defObj))))
      )
      (inv_main2 v_0)
    )
  )
)
(assert
  (forall ( (A Heap) (B Int) (C Int) (D Int) (E Int) (F Heap) )
    (=>
      (and
        (inv_main55 F E D C B)
      (let ((a!1 (ite (and (not (<= D 0)) (>= (HeapSize F) D))
                (select (HeapContents F) D)
                defObj)))
(let ((a!2 (not (<= (next (getTSLL a!1)) 0))))
(let ((a!3 (and a!2 (>= (HeapSize F) (next (getTSLL a!1))))))
(let ((a!4 (ite a!3 (select (HeapContents F) (next (getTSLL a!1))) defObj)))
(let ((a!5 (O_TSLL (TSLL (next (getTSLL a!4)) B (data (getTSLL a!4))))))
(let ((a!6 (HeapCtor (HeapSize F)
                     (store (HeapContents F) (next (getTSLL a!1)) a!5))))
  (and ((_ is O_TSLL) a!4) ((_ is O_TSLL) a!1) (= A (ite a!3 a!6 F)))))))))
      )
      (inv_main57 A E D C B)
    )
  )
)

;;(assert
;;  (forall ( (A Heap) (B Int) (C Int) (D Int) (E Int) (F Heap) )
;;    (=>
;;      (and
;;        (inv_main55 F E D C B)
;;      (let ((a!1 (ite (and (not (<= D 0)) (>= (HeapSize F) D))
;;                (select (HeapContents F) D)
;;                defObj)))
;;(let ((a!2 (not (<= (next (getTSLL a!1)) 0))))
;;(let ((a!3 (and a!2 (>= (HeapSize F) (next (getTSLL a!1))))))
;;(let ((a!4 (ite a!3 (select (HeapContents F) (next (getTSLL a!1))) defObj)))
;;(let ((a!5 (O_TSLL (TSLL (next (getTSLL a!4)) B (data (getTSLL a!4))))))
;;(let ((a!6 (HeapCtor (HeapSize F)
;;                     (store (HeapContents F) (next (getTSLL a!1)) a!5))))
;;  (and ((_ is O_TSLL) a!4) ((_ is O_TSLL) a!1) (= A (ite a!3 a!6 F)))))))))
;;      )
;;      (inv_main57 A E D C B)
;;    )
;;  )
;;)

(assert
  (forall ( (CHC_COMP_UNUSED Bool) ) 
    (=>
      (and
        CHC_COMP_FALSE
      )
      false
    )
  )
)

(check-sat)
(exit)
